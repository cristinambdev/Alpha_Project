document.addEventListener('DOMContentLoaded', () => {

    //handle dropdowns
    const dropdowns = document.querySelectorAll('[data-type="dropdown"]');

    document.addEventListener('click', function (event) {
        let clickedDropdown = null;

        dropdowns.forEach(dropdown => {
            const targetId = dropdown.getAttribute('data-target');
            const targetElement = document.querySelector(targetId);

            if (dropdown.contains(event.target)) {
                clickedDropdown = targetElement;

                document.querySelectorAll('.dropdown.dropdown-show').forEach(openDropDown => {
                    if (openDropDown !== targetElement) {
                        openDropDown.classList.remove('dropdown-show');
                    }
                });
                targetElement.classList.toggle('dropdown-show');
            }
        });
        // If clicked outside all dropdowns, close all
        if (!clickedDropdown && !event.target.closest('.dropdown')) {
            document.querySelectorAll('.dropdown.dropdown-show').forEach(openDropDown => {
                openDropDown.classList.remove('dropdown-show');
            });
        }
    });

    //handle open modal
    const modals = document.querySelectorAll('[data-type="modal"]');
    modals.forEach(modal => {
        modal.addEventListener('click', function () {
            const targetId = modal.getAttribute('data-target');
            const targetElement = document.querySelector(targetId);
            targetElement.classList.add('modal-show');
        });
    });

    //handle close modal
    const closeButtons = document.querySelectorAll('[data-type="close"]');
    closeButtons.forEach(button => {
        button.addEventListener('click', function () {
            const targetId = button.getAttribute('data-target');
            const targetElement = document.querySelector(targetId);
            targetElement.classList.remove('modal-show');
        })
    })

    // Close modal when clicking outside modal content generated by chatGPT
    document.querySelectorAll('.modal').forEach(modal => {
        modal.addEventListener('click', function (e) {
            if (e.target === modal) {
                modal.classList.remove('modal-show');
            }
        })
    })


    //handle form select
    document.querySelectorAll('.custom-select').forEach(select => {
       

        const trigger = select.querySelector('.custom-select-trigger');
        const triggerText = select.querySelector('.custom-select-text');
        const options = select.querySelectorAll('.custom-select-option');
        const hiddenInput = select.querySelector('input[type="hidden"]');
        const placeholder = select.dataset.placeholder || "Choose";

        const setValue = (value = "", text = placeholder) => {
            triggerText.textContent = text;
            hiddenInput.value = value;
            select.classList.toggle('has-placeholder', !value);
        }

        setValue();
        

        trigger.addEventListener('click', (e) => {
            e.stopPropagation();
            document.querySelectorAll('.custom-select.open')
                .forEach(el => el !== select && el.classList.remove('open'));
            select.classList.toggle('open');
        })

        options.forEach(option =>
            option.addEventListener('click', () => {
                setValue(option.dataset.value, option.textContent);
                select.classList.remove('open');
            })
        )

        document.addEventListener('click', e => {
            if (!select.contains(e.target))
                select.classList.remove('open');
        })
    })

    

    //handle submit forms
    const forms = document.querySelectorAll('form');
    forms.forEach(form => {
        form.addEventListener('submit', async (e) => {
            e.preventDefault(); // stops site to uppdate itself

            clearErrorMessages(form);  // Clear previous error messages

            const formData = new FormData(form);

            try {
                //const res = await fetch(form.action, {
                //    method: 'post',
                //    body: formData
                //})
                //suggested by Chat GPT
                const method = form.dataset.method || form.getAttribute('method') || 'post';
                const res = await fetch(form.action, {
                    method: method.toLowerCase(),
                    body: formData
                });

                if (res.ok) {
                    const modalElement = form.closest('.modal'); // Find the modal
                    if (modalElement) {
                        modalElement.style.display = 'none'; // Hide it
                    }
                    window.location.reload();
                }
                else if (res.status === 400) {
                    const data = await res.json();

                    if (data.errors) {
                        Object.keys(data.errors).forEach(key => {
                            let input = form.querySelector(`[name="${key}"]`);
                            if (input) {
                                input.classList.add('input-validation-error');
                            }

                            let span = form.querySelector(`[data-valmsg-for="${key}"]`);
                            if (span) {
                                span.innerText = data.errors[key].join('\n');
                                span.classList.add('field-validation-error');
                            }
                        });
                    }
                }
            }
            catch {
                console.log('error submitting the form');
            }
        })
    })

    // handle image-previewer
    document.querySelectorAll('.image-previewer').forEach(previewer => {
        const fileInput = previewer.querySelector('input[type="file"]')
        const imagePreview = previewer.querySelector('.image-preview')


        previewer.addEventListener('click', () => fileInput.click())

        fileInput.addEventListener('change', ({ target: { files } }) => {
            const file = files[0]
            if (file)
                processImage(file, imagePreview, previewer, previewSize)

        })
    })
    async function loadImage(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader()

            reader.onerror = () => reject(new Error("Failed to load file."))
            reader.onload = (e) => {
                const img = new Image()
                img.onerror = () => reject(new Error("Failed to load image."))
                img.onload = () => resolve(img)
                img.src = e.target.result
            }
            reader.readAsDataURL(file)
        })
    }
    const previewSize = 150;


    async function processImage(file, imagePreview, previewer, previewSize = 150) {
        try {
            const img = await loadImage(file)
            const canvas = document.createElement('canvas')
            canvas.width = previewSize
            canvas.height = previewSize

            const ctx = canvas.getContext('2d')
            ctx.drawImage(img, 0, 0, previewSize, previewSize)

            imagePreview.src = canvas.toDataURL('image/jpeg')
            previewer.classList.add('selected')
        }
        catch (error) {
            console.error("Failed on image-processing: ", error)
        }
    }

//clear formdata
document.querySelectorAll('.modal').forEach(modal => { // Iterate through each modal
    modal.querySelectorAll('form').forEach(form => {
        form.reset();

        const imagePreview = form.querySelector('.image-preview');
        if (imagePreview)
            imagePreview.src = '';

        const imagePreviewer = form.querySelector('.image-previewer');
        if (imagePreviewer)
            imagePreviewer.classList.remove('selected');
    })
})

    function clearErrorMessages(form) {
        form.querySelectorAll('[data-val="true"]').forEach(input => {
            input.classList.remove('input-validation-error');
        });
        form.querySelectorAll('[data-valmsg-for]').forEach(span => {
            span.innerText = '';
            span.classList.remove('field-validation-error');
        })
    }

})

















